#ifndef SQLEXCEPTIONIMPL_H
#define SQLEXCEPTIONIMPL_H
#include "ibs.h"
#include "exceptionbase.h"
#include "sqlexception.h"
namespace IBPP
{
class SQLExceptionImpl : public SQLException, public ExceptionBase
{
    //	(((((((( OBJECT INTERNALS ))))))))

private:
    int mSqlCode;
    int mEngineCode;

public:
    // The following constructors are small and could be inlined, but for object
    // code compacity of the library it is much better to have them non-inlined.
    // The amount of code generated by compilers for a throw is well-enough.

    SQLExceptionImpl() throw();
    SQLExceptionImpl(const SQLExceptionImpl& copied) throw();
    SQLExceptionImpl& operator=(const SQLExceptionImpl& copied) throw();
    SQLExceptionImpl(const IBS& status, const std::string& context,
                        const char* message = 0, ...) throw();

    virtual ~SQLExceptionImpl() throw ();

    //	(((((((( OBJECT INTERFACE ))))))))
    //
    //	The object public interface is partly implemented by inheriting from
    //	the ExceptionBase class.

public:
    virtual const char* Origin() const throw();
    virtual const char* ErrorMessage() const throw();
    virtual const char* what() const throw();
    virtual int SqlCode() const throw();
    virtual int EngineCode() const throw();
};
}
#endif // SQLEXCEPTIONIMPL_H
