#ifndef WRONGTYPEIMPL_H
#define WRONGTYPEIMPL_H

#include "exceptionbase.h"
#include "wrongtype.h"
namespace ibpp_internals
{
using namespace IBPP;

class WrongTypeImpl : public WrongType, public ExceptionBase
{
    //	(((((((( OBJECT INTERNALS ))))))))

public:
    // The following constructors are small and could be inlined, but for object
    // code compacity of the library it is much better to have them non-inlined.
    // The amount of code generated by compilers for a throw is well-enough.

    WrongTypeImpl() throw();
    WrongTypeImpl(const WrongTypeImpl& copied) throw();
    WrongTypeImpl& operator=(const WrongTypeImpl& copied) throw();
    WrongTypeImpl(const std::string& context, int sqlType, IITYPE varType,
                    const char* message = 0, ...) throw();

    virtual ~WrongTypeImpl() throw ();

    //	(((((((( OBJECT INTERFACE ))))))))
    //
    //	The object public interface is partly implemented by inheriting from
    //	the ExceptionBase class.

public:
    virtual const char* Origin() const throw();
    virtual const char* ErrorMessage() const throw();
    virtual const char* what() const throw();
};
}
#endif // WRONGTYPEIMPL_H
