#include "logicexceptionimpl.h"


//	(((((((( LogicExceptionImpl Implementation ))))))))

// The following constructors are small and could be inlined, but for object
// code compacity of the library it is much better to have them non-inlined.
// The amount of code generated by compilers for a throw is well-enough.

LogicExceptionImpl::LogicExceptionImpl() throw()
    : ExceptionBase()
{
}

LogicExceptionImpl::LogicExceptionImpl(const LogicExceptionImpl& copied) throw()
    : IBPP::LogicException(), ExceptionBase(copied)
{
}

LogicExceptionImpl& LogicExceptionImpl::operator=(const LogicExceptionImpl& copied) throw()
{
    ExceptionBase::operator=(copied);
    return *this;
}

LogicExceptionImpl::LogicExceptionImpl(const std::string& context,
                                        const char* message, ...) throw()
{
    va_list argptr;
    va_start(argptr, message);
    mWhat.assign("*** IBPP::LogicException ***\n");
    raise(context, message, argptr);
    va_end(argptr);
}

LogicExceptionImpl::~LogicExceptionImpl() throw ()
{
}

const char* LogicExceptionImpl::Origin() const throw()
{
    return ExceptionBase::Origin();
}

const char* LogicExceptionImpl::ErrorMessage() const throw()
{
    return ExceptionBase::what();
}

const char* LogicExceptionImpl::what() const throw()
{
    return ExceptionBase::what();
}
