#ifndef EXCEPTIONBASE_H
#define EXCEPTIONBASE_H

#include "_ibpp.h"
#include <string>
namespace IBPP
{
//
// Hidden implementation of Exception classes.
//

/*
                         std::exception
                                |
                         IBPP::Exception
                       /                 \
                      /                   \
  IBPP::LogicException    ExceptionBase    IBPP::SQLException
        |        \         /   |     \     /
        |   LogicExceptionImpl |   SQLExceptionImpl
        |                      |
    IBPP::WrongType            |
               \               |
              IBPP::WrongTypeImpl
*/

class ExceptionBase
{
    //	(((((((( OBJECT INTERNALS ))))))))

protected:
    std::string mContext; 			// Exception context ("IDatabase::Drop")
    std::string mWhat;				// Full formatted message

    void buildErrorMessage(const char* message);
    void raise(const std::string& context, const char* message, va_list argptr);

public:
    // The following constructors are small and could be inlined, but for object
    // code compacity of the library it is much better to have them non-inlined.
    // The amount of code generated by compilers for a throw is well-enough.

    ExceptionBase() throw();
    ExceptionBase(const ExceptionBase& copied) throw();
    ExceptionBase& operator=(const ExceptionBase& copied) throw();
    ExceptionBase(const std::string& context, const char* message = 0, ...) throw();

    virtual ~ExceptionBase() throw();

    //	(((((((( OBJECT INTERFACE ))))))))

    virtual const char* Origin() const throw();
    virtual const char* ErrorMessage() const throw();
    virtual const char* what() const throw();
};
}
#endif // EXCEPTIONBASE_H
